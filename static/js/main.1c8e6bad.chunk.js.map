{"version":3,"sources":["components/GridNode.jsx","components/LabelNode.jsx","helpers/helper-functions.js","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridNode","this","props","col","row","id","className","Component","LabelNode","extraClassName","hide","moment","require","getPassedWeeks","grid","birthday","passedWeeks","bday","lowerBound","subtract","upperBound","isSameOrBefore","alert","isAfter","validateBirthday","yearsPassed","date","lastYearToday","add","getYears","i","j","push","weeksPassed","daysToAdd","currDate","day","clone","format","getNearestSunday","lastSunday","getWeeks","Home","state","labels","weeksRemaining","createWeekLabels","createGrid","currentRow","createLabel","setState","createNode","allNodes","node","setTimeout","document","getElementById","length","n","booleanLock","querySelectorAll","forEach","button","disabled","toggleButtons","resetGrid","resetWeeksRemainingCount","dateParts","value","split","animateExploration","setWeeksRemainingCount","type","defaultValue","min","max","required","onClick","handleBirthdaySubmit","map","rIndex","nIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c8e6bad.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/GridNode.css'\n\nclass GridNode extends Component {\n    render() { \n        const { col, row } = this.props;\n        \n        return ( \n            <div\n                id={`node-${row}-${col}`}\n                className={`node`}>\n            </div>\n        );\n    }\n}\n \nexport default GridNode;","import React, { Component } from 'react';\nimport '../styles/LabelNode.css'\n\nclass LabelNode extends Component {\n    render() { \n        const { col, row, hide } = this.props;\n    \n        const extraClassName = hide ? 'label-hide' : '';\n        \n        return ( \n            <div\n                id={`label-${row}-${col}`}\n                className={`label-node ${extraClassName}`}> {row}\n            </div>\n        );\n    }\n}\n \nexport default LabelNode;","const moment = require('moment');\n\n// returns an array of GridNodes that represents the weeks\n// in a persons life that have already passed\nexport function getPassedWeeks(grid, birthday) { \n    const passedWeeks = [];\n    if (!validateBirthday(birthday)) return passedWeeks;\n\n    const yearsPassed = getYears(birthday);\n    for (let i = 0; i < yearsPassed; i++) { \n        for (let j = 0; j < 52; j++) { \n            passedWeeks.push(grid[i][j]);\n        }\n    }\n\n    const weeksPassed = getWeeks(birthday, yearsPassed);\n    for (let i = 0; i < weeksPassed; i++) { \n        passedWeeks.push(grid[yearsPassed][i]);\n    }\n    return passedWeeks;\n}\n\n// validates the input birthday\nfunction validateBirthday(birthday) { \n    let bday = moment(birthday, 'MM/DD/YYYY', true);\n    let lowerBound = moment().subtract(80, 'y');\n    let upperBound = moment();\n\n    if (bday.isSameOrBefore(lowerBound)) { \n        alert(\"You have lived longer than the average human life span (80 years)! That's awesome!\");\n        return false;\n    }\n    if (bday.isAfter(upperBound)) { \n        alert(\"You have not been born yet!\");\n        return false;\n    }\n    return true;\n}\n\n// returns the number of years that have passed in a person's life\nfunction getYears(birthday) { \n    let date = moment(birthday, 'MM/DD/YYYY', true);\n    const lastYearToday = moment().subtract(1, 'y');\n\n    let yearsPassed = 0;\n    while (date.isSameOrBefore(lastYearToday)) {\n        date.add(1, 'y');\n        yearsPassed++;\n    }\n    return yearsPassed;\n}\n\n// returns the number of weeks that have passed in a person's life\n// since their last birthday\nfunction getWeeks(birthday, yearsPassed) { \n    let date = moment(birthday, 'MM/DD/YYYY', true).add(yearsPassed, 'y');\n    let dateFormatted = date.clone().format('MM/DD/YYYY');\n\n    let daysToAdd = getNearestSunday(dateFormatted);\n    const lastSunday = moment().add(daysToAdd - 7, 'd'); // nearest sunday, minus one week\n\n    let weeksPassed = 0;\n    while (date.isSameOrBefore(lastSunday)) {\n        date.add(7, 'd');\n        weeksPassed++;\n    }\n    return weeksPassed;\n}\n\n// returns the number of days from the closest sunday\nfunction getNearestSunday(date) { \n    let currDate = moment(date, 'MM/DD/YYYY', true);\n    let day = currDate.clone().format('dddd');\n    let daysToAdd = 0;\n    while (day !== \"Sunday\") { \n        daysToAdd++;\n        currDate.add(1, 'd');\n        day = currDate.clone().format('dddd');\n    }\n    // either add to get to next sunday\n    // or subtract to get to previous sunday (whichever is closer)\n    return daysToAdd <= 3 ? daysToAdd : (7 - daysToAdd) * -1;\n}\n","import React, { Component } from 'react';\nimport '../styles/Home.css';\nimport GridNode from '../components/GridNode';\nimport LabelNode from '../components/LabelNode';\nimport { getPassedWeeks } from '../helpers/helper-functions';\n\nclass Home extends Component {\n    state = {\n        grid: [],\n        labels: [],\n        weeksRemaining: 4160, // 80 years * 52 weeks per year\n    }\n\n    componentDidMount() {\n        this.createWeekLabels();\n        this.createGrid();\n    }\n\n    createWeekLabels() { \n        const labels = [];\n        for (let row = 0; row < 80; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 1; col++) {\n                currentRow.push(this.createLabel(col, row));\n            }\n            labels.push(currentRow);\n        }\n        this.setState({\n            labels: labels,\n        });\n    }\n\n    createLabel(col, row) { \n        const hide = row % 5 !== 0 ? true : false;\n        return {\n            col: col,\n            row: row,\n            hide: hide,\n        };\n    }\n\n    createGrid() {\n        const grid = [];\n        for (let row = 0; row < 80; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 52; col++) {\n                currentRow.push(this.createNode(col, row));\n            }\n            grid.push(currentRow);\n        }\n        this.setState({\n            grid: grid,\n        });\n    }\n\n    createNode(col, row) {\n        return {\n            col: col,\n            row: row,\n        };\n    }\n\n    resetGrid() { \n        const allNodes = [];\n        for (const row of this.state.grid) {\n            for (const node of row) {\n                allNodes.push(node);\n            }\n        }\n        for (let i = 0; i < allNodes.length; i++) {\n            setTimeout(() => {\n                const node = allNodes[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            }, 1 * i);\n        }\n    }\n\n    resetWeeksRemainingCount() { \n        this.setState({\n            weeksRemaining: 4160,\n        });\n    }\n\n    setWeeksRemainingCount(n) { \n        this.setState({\n            weeksRemaining: 4160 - n,\n        });\n    }\n\n    toggleButtons(booleanLock) { \n        const buttons = document.querySelectorAll('button');\n        buttons.forEach((button) => {\n            button.disabled = booleanLock;\n        });\n    }\n\n    handleBirthdaySubmit() { \n        this.toggleButtons(true);\n        this.resetGrid();\n        this.resetWeeksRemainingCount();\n\n        const birthday = document.getElementById('birthday').value; // YYYY-MM-DD string\n        const dateParts = birthday.split('-');\n        const bday = dateParts[1] + \"/\" + dateParts[2] + \"/\" + dateParts[0]; // MM/DD/YYYY string\n\n        const { grid } = this.state;\n        const weeksPassed = getPassedWeeks(grid, bday);\n        this.animateExploration(weeksPassed);\n        this.setWeeksRemainingCount(weeksPassed.length);\n    }\n\n    animateExploration(weeksPassed) {\n        for (let i = 0; i < weeksPassed.length; i++) {\n            setTimeout(() => {\n                const node = weeksPassed[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-passed';\n            }, 5 * i);\n        }\n        setTimeout(() => {\n            this.toggleButtons(false);\n        }, weeksPassed.length * 5);\n    }\n\n    render() { \n        const { grid, labels, weeksRemaining } = this.state;\n\n        return ( \n            <div>\n                <div className=\"input-container\">\n                    <label>\n                        <h2> Enter Your Birthday: </h2>\n                        <input type=\"date\" id=\"birthday\" defaultValue=\"1990-01-01\" min=\"1900-01-01\" max=\"2020-12-31\" required/>\n                        <span className=\"validity\"></span>\n                    </label>\n                    <button className=\"birthdaySubmit\" onClick={() => this.handleBirthdaySubmit()}> Submit </button>\n                    <hr/>\n                </div>\n\n                <div className=\"container\">\n                    <h1> {weeksRemaining} <span className=\"remaining-text\"> weeks remaining </span> </h1>\n\n                    <div className=\"labels\">\n                        {labels.map((row, rIndex) => {\n                            return (\n                                <div key={rIndex}>\n                                    {row.map((node, nIndex) => {\n                                        const { row, col, hide } = node;\n                                        return (\n                                            <LabelNode\n                                                key={nIndex}\n                                                col={col}\n                                                row={row}\n                                                hide={hide}>\n                                            </LabelNode>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <div className=\"grid\">\n                        {grid.map((row, rIndex) => {\n                            return (\n                                <div key={rIndex}>\n                                    {row.map((node, nIndex) => {\n                                        const { row, col } = node;\n                                        return (\n                                            <GridNode\n                                                key={nIndex}\n                                                col={col}\n                                                row={row}>\n                                            </GridNode>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <p className=\"footer\"> ** Weeks remaining is based on the average human life span of 79 years (rounded to 80). </p>\n\n            </div>\n        );\n    }\n}\n \nexport default Home;","import './App.css';\nimport Home from './pages/Home';\n\nfunction App() { \n    return (\n        <div className=\"App\">\n            <Home />\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}