{"version":3,"sources":["components/GridNode.jsx","components/LabelNode.jsx","helpers/helper-functions.js","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridNode","this","props","col","row","id","className","Component","LabelNode","extraClassName","hide","moment","require","getPassedWeeks","grid","birthday","passedWeeks","yearsPassed","date","lastYearToday","subtract","isSameOrBefore","add","getYears","i","j","push","weeksPassed","daysToAdd","currDate","day","clone","format","getNearestSunday","lastSunday","getWeeks","Home","state","labels","weeksRemaining","predictedLifeSpan","createWeekLabels","createGrid","resetWeeksRemainingCount","years","currentRow","createLabel","setState","createNode","allNodes","node","setTimeout","document","getElementById","length","n","lifeSpan","booleanLock","querySelectorAll","forEach","button","disabled","toggleButtons","value","dateParts","split","bday","alert","Math","floor","lowerBound","upperBound","isAfter","validateUserInput","updatePredictedLifeSpan","resetGrid","animateExploration","setWeeksRemainingCount","for","type","name","defaultValue","min","max","required","step","onClick","handleBirthdaySubmit","map","rIndex","nIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0a358e9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/GridNode.css'\n\nclass GridNode extends Component {\n    render() { \n        const { col, row } = this.props;\n        \n        return ( \n            <div\n                id={`node-${row}-${col}`}\n                className={`node`}>\n            </div>\n        );\n    }\n}\n \nexport default GridNode;","import React, { Component } from 'react';\nimport '../styles/LabelNode.css'\n\nclass LabelNode extends Component {\n    render() { \n        const { col, row, hide } = this.props;\n    \n        const extraClassName = hide ? 'label-hide' : '';\n        \n        return ( \n            <div\n                id={`label-${row}-${col}`}\n                className={`label-node ${extraClassName}`}> {row}\n            </div>\n        );\n    }\n}\n \nexport default LabelNode;","const moment = require('moment');\n\n// validates the input birthday and predicated life span\nexport function validateUserInput(birthday, lifeSpan) { \n    if (lifeSpan < 1 || lifeSpan > 120) { \n        alert(\"Predicted life span must be in the range 1 - 120 years\");\n        return false;\n    }\n\n    let res = (lifeSpan - Math.floor(lifeSpan)) !== 0;\n    if (res) {\n        alert(\"Please enter a whole number for Predicated Life Span.\");\n        return false;\n    }\n\n    let bday = moment(birthday, 'MM/DD/YYYY', true);\n    let lowerBound = moment().subtract(lifeSpan, 'y');\n    let upperBound = moment();\n\n    if (bday.isSameOrBefore(lowerBound)) { \n        alert(\"Your predicted life span is less than your current age. Please enter a larger number.\");\n        return false;\n    }\n    if (bday.isAfter(upperBound)) { \n        alert(\"You have not been born yet!\");\n        return false;\n    }\n    return true;\n}\n\n// returns an array of GridNodes that represents the weeks\n// in a persons life that have already passed\nexport function getPassedWeeks(grid, birthday) { \n    const passedWeeks = [];\n\n    const yearsPassed = getYears(birthday);\n    for (let i = 0; i < yearsPassed; i++) { \n        for (let j = 0; j < 52; j++) { \n            passedWeeks.push(grid[i][j]);\n        }\n    }\n\n    const weeksPassed = getWeeks(birthday, yearsPassed);\n    for (let i = 0; i < weeksPassed; i++) { \n        passedWeeks.push(grid[yearsPassed][i]);\n    }\n    return passedWeeks;\n}\n\n// returns the number of years that have passed in a person's life\nfunction getYears(birthday) { \n    let date = moment(birthday, 'MM/DD/YYYY', true);\n    const lastYearToday = moment().subtract(1, 'y');\n\n    let yearsPassed = 0;\n    while (date.isSameOrBefore(lastYearToday)) {\n        date.add(1, 'y');\n        yearsPassed++;\n    }\n    return yearsPassed;\n}\n\n// returns the number of weeks that have passed in a person's life\n// since their last birthday\nfunction getWeeks(birthday, yearsPassed) { \n    let date = moment(birthday, 'MM/DD/YYYY', true).add(yearsPassed, 'y');\n    let dateFormatted = date.clone().format('MM/DD/YYYY');\n\n    let daysToAdd = getNearestSunday(dateFormatted);\n    const lastSunday = moment().add(daysToAdd - 7, 'd'); // nearest sunday, minus one week\n\n    let weeksPassed = 0;\n    while (date.isSameOrBefore(lastSunday)) {\n        date.add(7, 'd');\n        weeksPassed++;\n    }\n    return weeksPassed;\n}\n\n// returns the number of days from the closest sunday\nfunction getNearestSunday(date) { \n    let currDate = moment(date, 'MM/DD/YYYY', true);\n    let day = currDate.clone().format('dddd');\n    let daysToAdd = 0;\n    while (day !== \"Sunday\") { \n        daysToAdd++;\n        currDate.add(1, 'd');\n        day = currDate.clone().format('dddd');\n    }\n    // either add to get to next sunday\n    // or subtract to get to previous sunday (whichever is closer)\n    return daysToAdd <= 3 ? daysToAdd : (7 - daysToAdd) * -1;\n}","import React, { Component } from 'react';\nimport '../styles/Home.css';\nimport GridNode from '../components/GridNode';\nimport LabelNode from '../components/LabelNode';\nimport { getPassedWeeks, validateUserInput } from '../helpers/helper-functions';\n\nclass Home extends Component {\n    state = {\n        grid: [],\n        labels: [],\n        weeksRemaining: 4160, // default = 80 years * 52 weeks per year\n        predictedLifeSpan: 80,\n    }\n\n    componentDidMount() {\n        let defaultLifeSpan = 80;\n        this.createWeekLabels(defaultLifeSpan);\n        this.createGrid(defaultLifeSpan);\n        this.resetWeeksRemainingCount(defaultLifeSpan);\n    }\n\n    createWeekLabels(years) { \n        const labels = [];\n        for (let row = 0; row < years; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 1; col++) {\n                currentRow.push(this.createLabel(col, row));\n            }\n            labels.push(currentRow);\n        }\n        this.setState({\n            labels: labels,\n        });\n    }\n\n    createLabel(col, row) { \n        const hide = row % 5 !== 0 ? true : false;\n        return {\n            col: col,\n            row: row,\n            hide: hide,\n        };\n    }\n\n    createGrid(years) {\n        const grid = [];\n        for (let row = 0; row < years; row++) {\n            const currentRow = [];\n            for (let col = 0; col < 52; col++) {\n                currentRow.push(this.createNode(col, row));\n            }\n            grid.push(currentRow);\n        }\n        this.setState({\n            grid: grid,\n        });\n    }\n\n    createNode(col, row) {\n        return {\n            col: col,\n            row: row,\n        };\n    }\n\n    resetGrid() { \n        const allNodes = [];\n        for (const row of this.state.grid) {\n            for (const node of row) {\n                allNodes.push(node);\n            }\n        }\n        for (let i = 0; i < allNodes.length; i++) {\n            setTimeout(() => {\n                const node = allNodes[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            }, 1 * i);\n        }\n    }\n\n    resetWeeksRemainingCount(years) { \n        this.setState({\n            weeksRemaining: years * 52,\n        });\n    }\n\n    setWeeksRemainingCount(years, n) { \n        this.setState({\n            weeksRemaining: years * 52 - n,\n        });\n    }\n\n    updatePredictedLifeSpan(lifeSpan) { \n        this.setState({\n            predictedLifeSpan: lifeSpan,\n        });\n    }\n\n    toggleButtons(booleanLock) { \n        const buttons = document.querySelectorAll('button');\n        buttons.forEach((button) => {\n            button.disabled = booleanLock;\n        });\n    }\n\n    handleBirthdaySubmit() { \n        this.toggleButtons(true);\n        const { grid, predictedLifeSpan } = this.state;\n\n        const lifeSpan = document.getElementById('lifeSpan').value;\n        const birthday = document.getElementById('birthday').value; // YYYY-MM-DD string\n        const dateParts = birthday.split('-');\n        const bday = dateParts[1] + \"/\" + dateParts[2] + \"/\" + dateParts[0]; // MM/DD/YYYY string\n        \n        // validate user input first, returns if invalid\n        if (!validateUserInput(bday, lifeSpan)) {\n            this.toggleButtons(false);\n            return;\n        }\n\n        // if user changes the predicated life span remake the grid\n        if (lifeSpan !== predictedLifeSpan) { \n            this.createWeekLabels(lifeSpan);\n            this.createGrid(lifeSpan);\n            this.updatePredictedLifeSpan(lifeSpan);\n            setTimeout(() => { this.resetGrid(); }, 500); // make sure state is updated with new grid\n        } else { \n            this.resetGrid();\n        }\n        this.resetWeeksRemainingCount(lifeSpan);\n\n        const weeksPassed = getPassedWeeks(grid, bday);\n        setTimeout(() => { this.animateExploration(weeksPassed); }, 1000); // make sure grid is reset first \n        this.setWeeksRemainingCount(lifeSpan, weeksPassed.length);\n    }\n\n    animateExploration(weeksPassed) {\n        for (let i = 0; i < weeksPassed.length; i++) {\n            setTimeout(() => {\n                const node = weeksPassed[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-passed';\n            }, 5 * i);\n        }\n        setTimeout(() => {\n            this.toggleButtons(false);\n        }, weeksPassed.length * 5);\n    }\n\n    render() { \n        const { grid, labels, weeksRemaining } = this.state;\n\n        return ( \n            <div>\n                <div className=\"input-container\">\n                    <div>\n                        <label for=\"bday\"> <h2> Enter Your Birthday: </h2> </label>\n                        <input type=\"date\" id=\"birthday\" name=\"bday\" defaultValue=\"1990-01-01\" min=\"1900-01-01\" max=\"2020-12-31\" required/>\n                        <span className=\"validity\"></span>\n                    </div>\n                    <div>\n                        <label for=\"predictedLifeSpan\"> <h3> Predicted Life Span (in years): </h3> </label>\n                        <input type=\"number\" id=\"lifeSpan\" name=\"predictedLifeSpan\" min=\"1\" max=\"123\" defaultValue=\"80\" step=\"1\" required/>\n                        <span className=\"validity\"></span>\n                    </div>\n                    <button className=\"birthdaySubmit\" onClick={() => this.handleBirthdaySubmit()}> Submit </button>\n                    <hr/>\n                </div>\n\n                <div className=\"container\">\n                    <h1> {weeksRemaining} <span className=\"remaining-text\"> weeks remaining </span> </h1>\n\n                    <div className=\"labels\">\n                        {labels.map((row, rIndex) => {\n                            return (\n                                <div key={rIndex}>\n                                    {row.map((node, nIndex) => {\n                                        const { row, col, hide } = node;\n                                        return (\n                                            <LabelNode\n                                                key={nIndex}\n                                                col={col}\n                                                row={row}\n                                                hide={hide}>\n                                            </LabelNode>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <div className=\"grid\">\n                        {grid.map((row, rIndex) => {\n                            return (\n                                <div key={rIndex}>\n                                    {row.map((node, nIndex) => {\n                                        const { row, col } = node;\n                                        return (\n                                            <GridNode\n                                                key={nIndex}\n                                                col={col}\n                                                row={row}>\n                                            </GridNode>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <p className=\"footer\"> ** Default life span is based on the average human life span of 79 years (rounded to 80). </p>\n\n            </div>\n        );\n    }\n}\n \nexport default Home;","import './App.css';\nimport Home from './pages/Home';\n\nfunction App() { \n    return (\n        <div className=\"App\">\n            <Home />\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}